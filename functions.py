import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from CONST import MODELS_DICT, MODELS_NAMES
import scikitplot as skplt
import matplotlib.pyplot as plt
import numpy as np
import streamlit as st
import time
import tensorflow as tf
import pandas as pd
import numpy as np


def prepare_data(df):
    vectorizer = CountVectorizer(ngram_range=(1, 2))
    y = df["sentiment"]
    X = vectorizer.fit_transform(df["lemma"].apply(lambda x: np.str_(x)))
    
    _, X_test, _, y_test = train_test_split(
        X, y, test_size=.2, random_state=1)

    return X_test, y_test


def get_results(df, mod):
    empty = st.empty()
    with empty:
        st.info("loading...")
    # predicted probabilities generated by sklearn classifier
    if mod == MODELS_NAMES[3]:
        model, X_test, y_test = MODELS_DICT.get(mod)
    else:
        X_test, y_test = prepare_data(df)
        model = MODELS_DICT.get(mod)

    y_probas = model.predict_proba(X_test)
    with empty:
        st.info("Model loaded")
        time.sleep(2)
    empty.empty()
    return y_test, y_probas

def plot_results(y_true, y_probas, title, classes_to_plot=None):
    fig, ax = plt.subplots()
    skplt.metrics.plot_roc(
        y_true, y_probas,
        classes_to_plot=classes_to_plot,
        ax=ax,
        text_fontsize=6,
        title=title,
        cmap="tab20",
        plot_macro=False
    )
    return fig
